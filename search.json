[
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Content",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\n\n\n\n\nJun 26, 2024\n\n\nWelcome and introduction\n\n\n\n\nJun 26, 2024\n\n\nPackage foundations\n\n\n\n\nJun 26, 2024\n\n\nFunction documentation and dependencies\n\n\n\n\nJun 26, 2024\n\n\nTesting\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R Package Development Workshop",
    "section": "",
    "text": "Welcome to the R Package Development Workshop!\nThis is a two-day workshop, taking place at The University of Warwick, June 27th-27th, 2024.\nIt is aimed primarily at graduate students in the Department of Statistics, but open to all interested members of the university, space permitting.\nPlease see the join page for details on how to sign-up for the course."
  },
  {
    "objectID": "index.html#syllabus-overview",
    "href": "index.html#syllabus-overview",
    "title": "R Package Development Workshop",
    "section": "Syllabus overview",
    "text": "Syllabus overview\nThis is a hands-on workshop covering the entire process of creating an R package: including functions and data, checking and testing, all levels of documentation, publication and maintenance. The final session covers the advanced topic of using Rcpp code in a package.\nAll slides and further resources can be accessed from the content page and also via the schedule."
  },
  {
    "objectID": "index.html#session-details",
    "href": "index.html#session-details",
    "title": "R Package Development Workshop",
    "section": "Session details",
    "text": "Session details\n   June 26th-27th, 2024\n   10:30–16:30\n   Room A1.01, Zeeman Building, University of Warwick\n   Lunch provided each day\n   See the full schedule."
  },
  {
    "objectID": "index.html#instructor-details",
    "href": "index.html#instructor-details",
    "title": "R Package Development Workshop",
    "section": "Instructor details",
    "text": "Instructor details\n   Ella Kaye and Heather Turner\n   ella.m.kaye@warwick.ac.uk and h.turner.1@warwick.ac.uk"
  },
  {
    "objectID": "index.html#prerequistes",
    "href": "index.html#prerequistes",
    "title": "R Package Development Workshop",
    "section": "Prerequistes",
    "text": "Prerequistes\nPlease see the prerequisites page for details on getting set up in advance of the first session."
  },
  {
    "objectID": "slides/01-welcome/index.html#instructors",
    "href": "slides/01-welcome/index.html#instructors",
    "title": "Welcome and introduction",
    "section": "Instructors",
    "text": "Instructors\n\n\nElla Kaye\n\n\nResearch Software Engineer\nDepartment of Statistics\nUniversity of Warwick\nhttps://warwick.ac.uk/ellakaye\n\n\nHeather Turner\n\n\nRSE Fellow\nDepartment of Statistics\nUniversity of Warwick\nhttps://warwick.ac.uk/heatherturner"
  },
  {
    "objectID": "slides/01-welcome/index.html#course-material",
    "href": "slides/01-welcome/index.html#course-material",
    "title": "Welcome and introduction",
    "section": "Course material",
    "text": "Course material\n\nWebsite and slides\nhttps://Warwick-Stats-Resources.github.io/r-packages-2024\nWebsite and slides repo\nhttps://github.com/Warwick-Stats-Resources/r-packages-2024\nCourse text: R Packages (2nd edition), Hadley Wickham and Jenny Bryan\nhttps://r-pkgs.org"
  },
  {
    "objectID": "slides/01-welcome/index.html#schedule-wednesday-june-26th",
    "href": "slides/01-welcome/index.html#schedule-wednesday-june-26th",
    "title": "Welcome and introduction",
    "section": "Schedule: Wednesday June 26th",
    "text": "Schedule: Wednesday June 26th\n\n\n\n\nTime\nSession\nPresenter\n\n\n\n\n10:30–10:40\nWelcome and introduction\nElla Kaye, Heather Turner\n\n\n10:40–12:00\nPackage foundations\nElla Kaye\n\n\n12:00–13:00\nLunch\n\n\n\n13:00–14:30\nFunction documentation and dependencies\nElla Kaye\n\n\n14:30–15:00\nCoffee break\n\n\n\n15:00–16:30\nTesting\nHeather Turner"
  },
  {
    "objectID": "slides/01-welcome/index.html#schedule-thursday-june-27th",
    "href": "slides/01-welcome/index.html#schedule-thursday-june-27th",
    "title": "Welcome and introduction",
    "section": "Schedule: Thursday June 27th",
    "text": "Schedule: Thursday June 27th\n\n\n\n\nTime\nSession\nPresenter\n\n\n\n\n10:30–12:00\nPackage check and documentation\nElla Kaye\n\n\n12:00–13:00\nLunch\n\n\n\n13:00–14:30\nPackaging data; Publication and maintenance\nElla Kaye\n\n\n14:30–15:00\nCoffee break\n\n\n\n15:00–16:30\nRcpp in packages\nHeather Turner"
  },
  {
    "objectID": "slides/01-welcome/index.html#skillsforge",
    "href": "slides/01-welcome/index.html#skillsforge",
    "title": "Welcome and introduction",
    "section": "SkillsForge",
    "text": "SkillsForge\nSign-up on SkillsForge for credit there (assuming you attend the whole workshop).\nOr, go to https://skillsforge.warwick.ac.uk and search for “ST5”."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#overview",
    "href": "slides/02-package-foundations/index.html#overview",
    "title": "Package foundations",
    "section": "Overview",
    "text": "Overview\n\nWhy write a package?\nPackage structure and state\nPackage development setup\nCreating a package with a working function"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#why-write-a-package-1",
    "href": "slides/02-package-foundations/index.html#why-write-a-package-1",
    "title": "Package foundations",
    "section": "Why write a package?",
    "text": "Why write a package?\n\nYou want to generalise code\nYou want to document code\nYou want to test code\nYou want to share code\nYou want to create impact from your work"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#script-vs-package",
    "href": "slides/02-package-foundations/index.html#script-vs-package",
    "title": "Package foundations",
    "section": "Script vs package",
    "text": "Script vs package\n\n\n\n\n\n\n\nR script\nPackage\n\n\n\n\nOne-off data analysis\nProvides reusable components\n\n\nDefined by .R extension\nDefined by presence of DESCRIPTION file\n\n\nlibrary() calls\nImports defined in NAMESPACE file\n\n\nDocumentation in # comments\nDocumentation in files and Roxygen comments\n\n\nRun lines or source file\nInstall and restart\n\n\n\n\nreusable components: typically functions, but could also be R markdown template, Shiny app, data"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#package-structure",
    "href": "slides/02-package-foundations/index.html#package-structure",
    "title": "Package foundations",
    "section": "Package structure",
    "text": "Package structure\nAn R package is developed as a directory of source code files.\nThe names of files and directories must follow the specification laid out in the Writing R Extensions manual - we’ll cover the main components in this workshop.\nDirectory tree for an example RStudio package project:\n\n\nmypackage\n├── DESCRIPTION\n├── NAMESPACE\n├── R\n└── mypackage.Rproj"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#package-states",
    "href": "slides/02-package-foundations/index.html#package-states",
    "title": "Package foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\n\n\n\n\nsource\n\n\n\n\n\n\n\nbundled\nbinary\ninstalled\nin-memory\n\n\n\n\n\nsource\n\n\nWhat you create and work on.\nSpecific directory structure with some particular components e.g., DESCRIPTION, an /R directory."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#package-states-1",
    "href": "slides/02-package-foundations/index.html#package-states-1",
    "title": "Package foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\n\n\n\n\nbundled\n\n\n\n\n\n\n\nbinary\ninstalled\nin-memory\n\n\n\n\n\nbundled\n\n\nPackage files compressed to single .tar.gz file.\nAlso known as “source tarballs”.\nCreated by command line tool R CMD build\nUnpacked it looks very like the source package.\n\n\n\n\n\n\nIn the rare case that you need to make a bundle from a package you’re developing locally, use devtools::build(). Under the hood, this calls pkgbuild::build() and, ultimately, R CMD build, which is described further in the Building package tarballs section of Writing R Extensions."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#package-states-2",
    "href": "slides/02-package-foundations/index.html#package-states-2",
    "title": "Package foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\nbundled\n\n\n\n\nbinary\n\n\n\n\n\n\n\ninstalled\nin-memory\n\n\n\n\n\nbinary\n\n\nCompressed copy of the package in installed form.\nAlso a single file.\nPlatform specific: .tgz (Mac) .zip (Windows).\nPackage developers submit a bundle to CRAN; CRAN makes and distributes binaries.\n\n\n\n\n\n\nA package in binary form is Platform specific. If you write a package for distribution on CRAN, you submit a bundle to CRAN then CRAN makes and distributes binaries\ninstall.packages() is usually downloading the binary\nTo understand the difference between package bundle and a package binary see https://r-pkgs.org/package-structure-state.html"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#package-states-3",
    "href": "slides/02-package-foundations/index.html#package-states-3",
    "title": "Package foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\nbundled\nbinary\n\n\n\n\ninstalled\n\n\n\n\n\n\n\nin-memory\n\n\n\n\n\ninstalled\n\n\nA directory of files in a library directory.\nAny C/C++/Fortran code is in compiled form.\nHelp files, code and optionally data are in database form.\ninstall.packages() can install from source or from a binary"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#package-states-4",
    "href": "slides/02-package-foundations/index.html#package-states-4",
    "title": "Package foundations",
    "section": "Package states",
    "text": "Package states\n\n\n\nsource\nbundled\nbinary\ninstalled\n\n\n\n\nin-memory\n\n\n\n\n\n\n\n\n\n\n\n\nin-memory\n\n\nIf a package is installed, library() makes its function available by loading the package into memory and attaching it to the search path."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#buildinginstalling-packages-from-source",
    "href": "slides/02-package-foundations/index.html#buildinginstalling-packages-from-source",
    "title": "Package foundations",
    "section": "Building/Installing Packages from Source",
    "text": "Building/Installing Packages from Source\nThere are various reasons we may wish to build or install from source:\n\nInstalling a CRAN package where a binary has not yet been built for the latest version.\nInstalling a package from GitHub/other version-controlled source code repository, e.g.\n\n\nremotes::install_github(\"r-lib/revdepcheck\")\n\n\nInstalling our own package from the source code or building it to submit to CRAN.\n\nIf the package includes C/C++/Fortran code, we will need a suitable compiler."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#linux",
    "href": "slides/02-package-foundations/index.html#linux",
    "title": "Package foundations",
    "section": "Linux",
    "text": "Linux\nDebian/Ubuntu:\napt-get update\napt-get install r-base-dev\nFedora/RedHat: should be set up already."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#macos",
    "href": "slides/02-package-foundations/index.html#macos",
    "title": "Package foundations",
    "section": "MacOS",
    "text": "MacOS\nOption 1\n\nRegister as an Apple developer (for free)\n\nThen, in the terminal:\nxcode-select --install\n\n\nOption 2\n\nInstall the current release of full Xcode from the Mac App Store\nWithin XCode go to Preferences -&gt; Downloads and install the Command Line Tools\nMore convenient but installs a lot you don’t need"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#windows",
    "href": "slides/02-package-foundations/index.html#windows",
    "title": "Package foundations",
    "section": "Windows",
    "text": "Windows\n\nDownload the Rtools installer that matches your version of R from https://cran.r-project.org/bin/windows/Rtools/\nRun the installer, Rtools.exe, keeping the default settings."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#the-setup-well-be-using",
    "href": "slides/02-package-foundations/index.html#the-setup-well-be-using",
    "title": "Package foundations",
    "section": "The setup we’ll be using",
    "text": "The setup we’ll be using\nWe’ll be using the following tools for package development:\n\nRStudio: to manage and edit the package source code\ngit + GitHub: to version control the package source code\ndevtools and usethis R packages:\n\ndevtools for functions supporting the development workflow\nusethis for setup tasks\ndevtools depends on usethis package\nIntegrated with RStudio: projects, menu items/shortcuts\nUses system utilities internally: R CMD utilities bundled with R"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#follow-along",
    "href": "slides/02-package-foundations/index.html#follow-along",
    "title": "Package foundations",
    "section": "Follow along",
    "text": "Follow along\nFor the rest of this session, follow along on your own computer to make sure you’re set up for package development and to create our example package."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#devtools-and-usethis",
    "href": "slides/02-package-foundations/index.html#devtools-and-usethis",
    "title": "Package foundations",
    "section": "devtools and usethis",
    "text": "devtools and usethis\nWe can use devtools right away to check our system is setup for package development.\n\ninstall.packages(\"devtools\")\n\n\nlibrary(devtools)\n\n\nhas_devel()\n\nYour system is ready to build packages!\n\n\nInstalling devtools will also install usethis.\nCheck you have the latest version of usethis – 2.2.0 was recently released – and update if not:\n\npackageVersion(\"usethis\")\n\n[1] '2.2.3'"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#create-a-github-pat",
    "href": "slides/02-package-foundations/index.html#create-a-github-pat",
    "title": "Package foundations",
    "section": "Create a GitHub PAT",
    "text": "Create a GitHub PAT\nThe usethis package uses personal access tokens (PAT) to communicate with GitHub.\nFirst, make sure you’re signed into GitHub. Then run\n\nusethis::create_github_token()\n\n\n\nAdd Note describing the computer or use- case (e.g. personal-macbook-pro-2021, project-xyz)\nSelect expiration (recommend default 30 days)\nCheck scope (default selection is fine)\nClick ‘Generate Token’\nImportant! Copy token to clipboard, do not close window until stored (see next slide)!\nYou may want to store token in a secure vault, like 1Password or BitWarden"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#store-your-pat",
    "href": "slides/02-package-foundations/index.html#store-your-pat",
    "title": "Package foundations",
    "section": "Store your PAT",
    "text": "Store your PAT\nBy installing usethis, you will also have the gitcreds package to manage git credentials.\nPut your PAT into the Git credential store by running the following command and entering your copied PAT at the prompt (assume the PAT is on your clipboard).\n\ngitcreds::gitcreds_set()\n\n\nIf you don’t have a PAT stored, will prompt you to enter: paste!\nIf you do, you will be given a choice to keep/replace/see the password\n\nchoose as appropriate\nif replacing, paste!"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#sitrep-and-vaccinate",
    "href": "slides/02-package-foundations/index.html#sitrep-and-vaccinate",
    "title": "Package foundations",
    "section": "sitrep and vaccinate",
    "text": "sitrep and vaccinate\nAsk for a situation report:\n\nusethis::git_sitrep()\n\nCheck that the PAT is discovered.\nCheck that your user name and email are defined, else follow the configuration instructions from a previous Advanced R workshop.\nIt’s also a good idea to vaccinate. This implements best practice by adding files to your global .gitignore:\n\nusethis::git_vaccinate()"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#more-on-usethis-and-github-creds",
    "href": "slides/02-package-foundations/index.html#more-on-usethis-and-github-creds",
    "title": "Package foundations",
    "section": "More on usethis and GitHub creds",
    "text": "More on usethis and GitHub creds\nIt is well worth reading (and following all the instructions) in the following two usethis vignettes:\n\nusethis setup\nManaging Git(Hub) Credentials\n\nSee in particular the section on ongoing PAT maintenance"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#package-name",
    "href": "slides/02-package-foundations/index.html#package-name",
    "title": "Package foundations",
    "section": "Package name",
    "text": "Package name\nCan only contain the characters [A-Z, a-z, 0-9, .]. Some tips:\n\nUnique name you can easily Google\nAvoid mixing upper and lower case\nUse abbreviations\nAdd an r to make unique, e.g stringr\nUse wordplay, e.g. lubridate\nAvoid trademarked names\nUse the available package to check name not taken\n\nFor now, we will use animalsounds"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#create-a-package-1",
    "href": "slides/02-package-foundations/index.html#create-a-package-1",
    "title": "Package foundations",
    "section": "Create a package!",
    "text": "Create a package!\n\nusethis::create_package(\"~/Desktop/animalsounds\")\n\n\nBe deliberate about where you create your package.\nDo not nest inside another RStudio project, R package or git repo.\nYou may want to use a different path!"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#create_package",
    "href": "slides/02-package-foundations/index.html#create_package",
    "title": "Package foundations",
    "section": "create_package()",
    "text": "create_package()\nWhat happens when we run create_package()?\n\nR will create a folder called animalsounds which is a package and an RStudio project\nrestart R in the new project\ncreate the some infrastructure for your package with the minimal components for a working package\nstart the RStudio Build pane"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#r-studio-build-panemenu",
    "href": "slides/02-package-foundations/index.html#r-studio-build-panemenu",
    "title": "Package foundations",
    "section": "R Studio Build pane/menu",
    "text": "R Studio Build pane/menu"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#minimal-components",
    "href": "slides/02-package-foundations/index.html#minimal-components",
    "title": "Package foundations",
    "section": "Minimal components",
    "text": "Minimal components\nusethis will create the minimal components of a package that we have already seen:\n\nDESCRIPTION provides metadata about your package.\nNAMESPACE declares the functions your package exports for external use and the external functions your package imports from other packages.\nThe /R directory is where we will put .R files with function definitions."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#auxiliary-files",
    "href": "slides/02-package-foundations/index.html#auxiliary-files",
    "title": "Package foundations",
    "section": "Auxiliary files",
    "text": "Auxiliary files\nusethis also adds some auxiliary files:\n\nanimalsounds.Rproj is the file that makes this directory an RStudio Project.\n.Rbuildignore lists files that we need but that should not be included when building the R package from source.\n.gitignore anticipates Git usage and ignores some standard, behind-the-scenes files created by R and RStudio."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#use-git",
    "href": "slides/02-package-foundations/index.html#use-git",
    "title": "Package foundations",
    "section": "Use git",
    "text": "Use git\nTo make our project a git repository, or ‘repo’, on our local machine we use usethis::use_git()\nMake your package a git repo:\n\nusethis::use_git()"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#use_git-output-part-1",
    "href": "slides/02-package-foundations/index.html#use_git-output-part-1",
    "title": "Package foundations",
    "section": "use_git() output (part 1)",
    "text": "use_git() output (part 1)\n\n ✔ Initialising Git repo\n ✔ Adding '.Rhistory', '.Rdata', '.httr-oauth', '.DS_Store' to  '.gitignore' \n There are 5 uncommitted files:\n * '.gitignore'\n * '.Rbuildignore'\n * 'DESCRIPTION'\n * 'animalsounds.Rproj'\n * 'NAMESPACE'\n Is it ok to commit them?\n\n 1: I agree\n 2: Absolutely not\n 3: No way\n\nChoose the affirmative option! (The exact options may vary.)"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#use_git-output-part-2",
    "href": "slides/02-package-foundations/index.html#use_git-output-part-2",
    "title": "Package foundations",
    "section": "use_git() output (part 2)",
    "text": "use_git() output (part 2)\n\n√ Adding files\n√ Commit with message 'Initial commit'\n• A restart of RStudio is required to activate the Git pane\nRestart now?\n\n1: Nope\n2: Definitely\n3: No\n\nChoose the affirmative option! (The exact options may vary.)\n\nYou should find the git pane has opened."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#use-github",
    "href": "slides/02-package-foundations/index.html#use-github",
    "title": "Package foundations",
    "section": "Use GitHub",
    "text": "Use GitHub\nTo create a copy on GitHub we use usethis::use_github().\n\n# Choose one of the following:\nusethis::use_github() # creates a public repo\nusethis::use_github(private = TRUE) # recommended\n\nThis takes a local project, creates an associated repo on GitHub, adds it to your local repo as the “origin remote”, and makes an initial “push” to synchronize.\n\n\n\n\n\nWarwick GitHub\n\n\nUniversity of Warwick members can use the University’s private GitHub instance, e.g.\n\nusethis::use_github(\"https://github.warwick.ac.uk\")\n\nHowever, Warwick GitHub does not support GitHub Actions or GitHub Pages, so for packages using your personal account is better – we’ll be using both Actions and Pages later.\n\n\n\n\n\nPromote private repo for novel package development - link to licensing issue, covered in package documentation session"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#use_github-output",
    "href": "slides/02-package-foundations/index.html#use_github-output",
    "title": "Package foundations",
    "section": "use_github() output",
    "text": "use_github() output\n\nusethis::use_github()\n\n\n ✔ Creating GitHub repository 'Warwick-Stats-Resources/animalsounds'\n ✔ Setting remote 'origin' to 'https://github.com/Warwick-Stats-Resources/animalsounds.git'\n ✔ Setting URL field in DESCRIPTION to  'https://github.com/Warwick-Stats-Resources/animalsounds'\n ✔ Setting BugReports field in DESCRIPTION to  'https://github.com/Warwick-Stats-Resources/animalsounds/issues'\n There is 1 uncommitted file:\n * 'DESCRIPTION'\n Is it ok to commit it?\n\n 1: Nope\n 2: For sure\n 3: No way\n\nChoose the affirmative option! (The exact options may vary.)\n\nTake a look at the repo on GitHub. There is no /R folder as that folder is empty at the moment!\nDuring the demo, will need to run use_github(\"Warwick-Stats-Resources\") as by default use_github goes to my personal repo"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#adding-functions",
    "href": "slides/02-package-foundations/index.html#adding-functions",
    "title": "Package foundations",
    "section": "Adding functions",
    "text": "Adding functions\nFunctions go in an .R file in the /R directory.\nThere’s a usethis helper for adding .R files!\n\nusethis::use_r(\"file_name\") \n\nusethis::use_r() adds the file extension (you don’t need to).\n\nUse a separate .R file for each function or closely related set of functions, e.g.\n\na top-level function and the internal functions it calls\na family of related functions\na summary method and its print method"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#usethisuse_r",
    "href": "slides/02-package-foundations/index.html#usethisuse_r",
    "title": "Package foundations",
    "section": "usethis::use_r()",
    "text": "usethis::use_r()\nCreate a new R file in your package called animal_sounds.R\n\nusethis::use_r(\"animal_sounds\")\n\nThe output includes:\n\n• Modify 'R/animal_sounds.R'  \n• Call `use_test()` to create a matching test file \n\nIgnore the instruction to call use_test() for now - we’ll cover testing later."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#add-a-function",
    "href": "slides/02-package-foundations/index.html#add-a-function",
    "title": "Package foundations",
    "section": "Add a function",
    "text": "Add a function\nPut the following toy function into your script:\n\nanimal_sounds &lt;- function(animal, sound) {\n    stopifnot(is.character(animal) & length(animal) == 1)\n    stopifnot(is.character(sound) & length(sound) == 1)\n    paste0(\"The \", animal, \" goes \", sound, \"!\")\n}\n\nDon’t try to use the function yet!"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#development-workflow",
    "href": "slides/02-package-foundations/index.html#development-workflow",
    "title": "Package foundations",
    "section": "Development workflow",
    "text": "Development workflow\nIn a normal script, you might use:\n\nsource(\"R/animal_sounds.R\")\n\nHowever, for building packages, we need to use the devtools approach.\nThis will ensure our function has the correct namespace and can find internal functions, functions imported by our package from other packages, etc."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#development-workflow-1",
    "href": "slides/02-package-foundations/index.html#development-workflow-1",
    "title": "Package foundations",
    "section": "Development workflow",
    "text": "Development workflow\n\n\nYou don’t even need to save your code!\n\n\ndevtools::load_all() simulates package installation so that you can test your function."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#your-turn",
    "href": "slides/02-package-foundations/index.html#your-turn",
    "title": "Package foundations",
    "section": "Your turn",
    "text": "Your turn\n\nLoad all with devtools::load_all() and try calling the animal_sounds() function with appropriate values for animal and sound.\nChange some tiny thing about your function – maybe the animal “says” instead of “goes”.\nLoad all with devtools::load_all() and try calling the updated function to see the changed behaviour.\nAdd animal_sounds.R so that it is tracked by git. Make a commit with the message Add animal_sounds().\nPush all your commits from this session."
  },
  {
    "objectID": "slides/02-package-foundations/index.html#references",
    "href": "slides/02-package-foundations/index.html#references",
    "title": "Package foundations",
    "section": "References",
    "text": "References\nWickham, H and Bryan, J, R Packages (2nd edn, in progress), https://r-pkgs.org.\nR Core Team, Writing R Extensions, https://cran.r-project.org/doc/manuals/r-release/R-exts.html"
  },
  {
    "objectID": "slides/02-package-foundations/index.html#license",
    "href": "slides/02-package-foundations/index.html#license",
    "title": "Package foundations",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Wednesday June 26th, 2024\n\n\n\n\n\n\n\n\nTime\nSession\nPresenter\n\n\n\n\n10:30–10:40\nWelcome and introduction\nElla Kaye, Heather Turner\n\n\n10:40–12:00\nPackage foundations\nElla Kaye\n\n\n12:00–13:00\nLunch\n\n\n\n13:00–14:30\nFunction documentation and dependencies\nElla Kaye\n\n\n14:30–15:00\nCoffee break\n\n\n\n15:00–16:30\nTesting\nHeather Turner\n\n\n\n\n\nThursday June 27th, 2024\n\n\n\n\n\n\n\n\nTime\nSession\nPresenter\n\n\n\n\n10:30–12:00\nPackage check and documentation\nElla Kaye\n\n\n12:00–13:00\nLunch\n\n\n\n13:00–14:30\nPackaging data; Publication and maintenance\nElla Kaye\n\n\n14:30–15:00\nCoffee break\n\n\n\n15:00–16:30\nRcpp in packages\nHeather Turner"
  },
  {
    "objectID": "content/01-welcome/index.html",
    "href": "content/01-welcome/index.html",
    "title": "Welcome and introduction",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-welcome/index.html#slides",
    "href": "content/01-welcome/index.html#slides",
    "title": "Welcome and introduction",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/01-welcome/index.html#resources",
    "href": "content/01-welcome/index.html#resources",
    "title": "Welcome and introduction",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nWickham, H and Bryan, J, R Packages (2nd edition)\nhttps://r-pkgs.org\nR Core Team, Writing R Extensions\nhttps://cran.r-project.org/doc/manuals/r-release/R-exts.html\n\n\n\nPackages\n\ndevtools\nhttps://devtools.r-lib.org\nusethis\nhttps://usethis.r-lib.org"
  },
  {
    "objectID": "content/02-package-foundations/index.html",
    "href": "content/02-package-foundations/index.html",
    "title": "Package foundations",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-package-foundations/index.html#slides",
    "href": "content/02-package-foundations/index.html#slides",
    "title": "Package foundations",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/02-package-foundations/index.html#resources",
    "href": "content/02-package-foundations/index.html#resources",
    "title": "Package foundations",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nWickham, H and Bryan, J, R Packages (2nd edition)\nhttps://r-pkgs.org\nR Core Team, Writing R Extensions\nhttps://cran.r-project.org/doc/manuals/r-release/R-exts.html\n\n\n\nPackages\n\ndevtools\nhttps://devtools.r-lib.org\nusethis\nhttps://usethis.r-lib.org"
  },
  {
    "objectID": "join.html",
    "href": "join.html",
    "title": "Apply for the workshop",
    "section": "",
    "text": "Please click below to register your interest in participating in the workshop. Note that the course runs for two days and participation for the entire workshop is expected.\nApply\nPlease note that filling in this form does not guarantee a place. Priority will be given to those in the Department of Statistics (as the department is funding the course) though graduate students and staff from all departments are welcome. All else being equal, if the course is over-subscribed, places will be given to those who signed-up earliest.\nThe form closes on June 18th 2024 and you will be notified if you have a place on June 19th at the latest.\nIf you have access to SkillsForge, you can also sign-up there. Note that you have to sign-up at the apply link to be considered for a place. The SkillsForge link is only to allow participants with a place to receive that credit.\nSkillsForge"
  },
  {
    "objectID": "content/03-documentation/index.html",
    "href": "content/03-documentation/index.html",
    "title": "Function documentation and dependencies",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-documentation/index.html#slides",
    "href": "content/03-documentation/index.html#slides",
    "title": "Function documentation and dependencies",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/03-documentation/index.html#resources",
    "href": "content/03-documentation/index.html#resources",
    "title": "Function documentation and dependencies",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nWickham, H and Bryan, J, R Packages (2nd edition)\nhttps://r-pkgs.org\nR Core Team, Writing R Extensions\nhttps://cran.r-project.org/doc/manuals/r-release/R-exts.html\n\n\n\nPackages\n\ndevtools\nhttps://devtools.r-lib.org\nusethis\nhttps://usethis.r-lib.org\nroxygen2\nhttps://roxygen2.r-lib.org\nrlang\nhttps://rlang.r-lib.org\ncli\nhttps://cli.r-lib.org"
  },
  {
    "objectID": "content/04-testing/index.html",
    "href": "content/04-testing/index.html",
    "title": "Testing",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-testing/index.html#slides",
    "href": "content/04-testing/index.html#slides",
    "title": "Testing",
    "section": "",
    "text": "Here’s a link to the slides in a new window.\nHere are the slides embedded:"
  },
  {
    "objectID": "content/04-testing/index.html#resources",
    "href": "content/04-testing/index.html#resources",
    "title": "Testing",
    "section": "Resources",
    "text": "Resources\n\nReading\n\nWickham, H and Bryan, J, R Packages (2nd edition)\nhttps://r-pkgs.org\nR Core Team, Writing R Extensions\nhttps://cran.r-project.org/doc/manuals/r-release/R-exts.html\n\n\n\nPackages\n\ndevtools\nhttps://devtools.r-lib.org\nusethis\nhttps://usethis.r-lib.org\ntestthat\nhttps://testthat.r-lib.org"
  },
  {
    "objectID": "slides/03-documentation/index.html#overview",
    "href": "slides/03-documentation/index.html#overview",
    "title": "Function documentation and dependencies",
    "section": "Overview",
    "text": "Overview\n\nDocumenting functions with roxygen2\nNAMESPACE: exporting functions\nNAMESPACE: importing functions"
  },
  {
    "objectID": "slides/03-documentation/index.html#roxygen2",
    "href": "slides/03-documentation/index.html#roxygen2",
    "title": "Function documentation and dependencies",
    "section": "roxygen2",
    "text": "roxygen2\nThe roxygen2 package generates documentation from specially formatted comments, that we write above the function code, e.g.\n\n#' @param x A numeric vector.\n\n\n#' is a roxygen comment.\n@param is a roxygen tag.\nThe @param tag takes an argument: the name of the parameter\nThe remaining text (until the next tag in the file) is the documentation relevant to the tag."
  },
  {
    "objectID": "slides/03-documentation/index.html#common-tags",
    "href": "slides/03-documentation/index.html#common-tags",
    "title": "Function documentation and dependencies",
    "section": "Common tags",
    "text": "Common tags\nThere are four tags you’ll use for most functions:\n\n\n\n\nTag\nPurpose\n\n\n\n\n@param arg\nDescribe inputs\n\n\n@examples\nShow how the function works\n\n\n@return\nDescribe the return value (not needed if NULL)\n\n\n@export\nAdd this tag if the function should be user-visible\n\n\n\n Usual RStudio shortcuts work in the @examples section, allowing you to run code interactively.\n\nOther important ones: @seealso | Pointers to related functions @references @importFRom @method @note @rdname @keywords internal @format (data) @section"
  },
  {
    "objectID": "slides/03-documentation/index.html#the-description-block",
    "href": "slides/03-documentation/index.html#the-description-block",
    "title": "Function documentation and dependencies",
    "section": "The description block",
    "text": "The description block\nThe roxygen comment should start with a description block.\n\nFirst sentence is the title.\nNext paragraph is the description.\nEverything else is the details (optional).\n\n#' Title in Title Case of up to 65 Characters\n#'\n#' Mandatory description of what the function does. \n#' Should be a short paragraph of a few lines only.\n#'\n#' The details section is optional and may be several paragraphs. It can even\n#' contain sub-sections (not illustrated here)."
  },
  {
    "objectID": "slides/03-documentation/index.html#rstudio-helps-you-get-started",
    "href": "slides/03-documentation/index.html#rstudio-helps-you-get-started",
    "title": "Function documentation and dependencies",
    "section": "RStudio helps you get started",
    "text": "RStudio helps you get started\nPut your cursor inside a function, then select ‘Insert Roxygen Skeleton’ from the Code menu.\n\n\n\n\n\n#' Title\n#'\n#' @param animal\n#' @param sound\n#'\n#' @return\n#' @export\n#'\n#' @examples\nanimal_sounds &lt;- function(animal, sound) {\n  stopifnot(is.character(animal) & length(animal) == 1)\n  stopifnot(is.character(sound) & length(sound) == 1)\n  paste0(\"The \", animal, \" goes \", sound, \"!\")\n}"
  },
  {
    "objectID": "slides/03-documentation/index.html#example-roxygen-documentation",
    "href": "slides/03-documentation/index.html#example-roxygen-documentation",
    "title": "Function documentation and dependencies",
    "section": "Example roxygen documentation",
    "text": "Example roxygen documentation\n#' Sort a Numeric Vector in Decreasing Order\n#'\n#' Sort a numeric vector so that the values are in deceasing order.  \n#' Missing values are optionally removed or put last.\n#'\n#' @param x A numeric vector.\n#' @param na.rm A logical value indicating whether to remove missing values\n#' before sorting.\n#' @return A vector with the values sorted in descreasing order.\n#' @export\n#'\n#' @examples\n#' x &lt;- c(3, 7, 2, NA)\n#' high_to_low(x)\n#' high_to_low(x, na.rm = TRUE)"
  },
  {
    "objectID": "slides/03-documentation/index.html#r-documentation-file",
    "href": "slides/03-documentation/index.html#r-documentation-file",
    "title": "Function documentation and dependencies",
    "section": "R documentation file",
    "text": "R documentation file\nroxygen2 converts the roxygen block to an .Rd file in the /man directory\n% Generated by roxygen2: do not edit by hand\n% Please edit documentation in R/high_to_low.R\n\\name{high_to_low}\n\\alias{high_to_low}\n\\title{Sort a Numeric Vector in Decreasing Order}\n\\usage{\nhigh_to_low(x, na.rm = FALSE)\n}\n\\arguments{\n\\item{x}{A numeric vector.}\n\\item{na.rm}{A logical value indicating whether to remove missing values\nbefore sorting.}\n}\n\\value{\n...\n\nThis is in a toy package, sortnum, created for the R Forwards package development workshops:\nhttps://github.com/forwards/workshops/tree/master/sortnum"
  },
  {
    "objectID": "slides/03-documentation/index.html#html-file",
    "href": "slides/03-documentation/index.html#html-file",
    "title": "Function documentation and dependencies",
    "section": "HTML file",
    "text": "HTML file\nWhen the package is installed, the .Rd is converted by R to HTML on demand"
  },
  {
    "objectID": "slides/03-documentation/index.html#regular-documentation-workflow",
    "href": "slides/03-documentation/index.html#regular-documentation-workflow",
    "title": "Function documentation and dependencies",
    "section": "Regular documentation workflow",
    "text": "Regular documentation workflow\n\n\nYou must have loaded the package with load_all() at least once."
  },
  {
    "objectID": "slides/03-documentation/index.html#a-namespace-splits-functions-into-two-classes",
    "href": "slides/03-documentation/index.html#a-namespace-splits-functions-into-two-classes",
    "title": "Function documentation and dependencies",
    "section": "A namespace splits functions into two classes",
    "text": "A namespace splits functions into two classes\n\n\n\n\nInternal\nExternal\n\n\n\n\nOnly for use within package\nFor use by others\n\n\nDocumentation optional\nMust be documented\n\n\nEasily changed\nChanging will break other people’s code"
  },
  {
    "objectID": "slides/03-documentation/index.html#default-namespace",
    "href": "slides/03-documentation/index.html#default-namespace",
    "title": "Function documentation and dependencies",
    "section": "Default NAMESPACE",
    "text": "Default NAMESPACE\n\nIt is best to export functions explicitly\nThe NAMESPACE file as created by usethis::create_package() does not export anything by default.\n\n\n\n\n\nWarning\n\n\nA package created from the RStudio menus via File &gt; New Project &gt; New Directory &gt; R Package creates a NAMESPACE that exports everything by default, with exportPattern(\"^[[:alpha:]]+\")\nThis is a good reason not to do this: always call usethis::create_package() to create a package.\nFor similar reasons, also avoid package.skeleton()."
  },
  {
    "objectID": "slides/03-documentation/index.html#exporting-functions",
    "href": "slides/03-documentation/index.html#exporting-functions",
    "title": "Function documentation and dependencies",
    "section": "Exporting functions",
    "text": "Exporting functions\n#' @export\nfun1 &lt;- function(...) {}\nWhen we call devtools::document(), an export() directive will be added to NAMESPACE for each function that has an #' @export comment.\n# Generated by roxygen2: do not edit by hand\n\nexport(fun1)"
  },
  {
    "objectID": "slides/03-documentation/index.html#what-to-export",
    "href": "slides/03-documentation/index.html#what-to-export",
    "title": "Function documentation and dependencies",
    "section": "What to export",
    "text": "What to export\nOnly export functions that you want your package users to use, i.e. those that are relevant to the purpose of the package.\nDon’t export internal helpers, e.g.\n# Defaults for NULL values\n`%||%` &lt;- function(a, b) if (is.null(a)) b else a\n\n# Remove NULLs from a list\ncompact &lt;- function(x) {\n  x[!vapply(x, is.null, logical(1))]\n}"
  },
  {
    "objectID": "slides/03-documentation/index.html#your-turn",
    "href": "slides/03-documentation/index.html#your-turn",
    "title": "Function documentation and dependencies",
    "section": "Your turn",
    "text": "Your turn\nFor the animal_sounds function:\n\n\nInsert a Roxygen skeleton using the RStudio helper.\nCreate a draft documentation file with devtools::document() or Cmd/Ctrl + Shift + D.\nClick on “Diff” in the Git pane and view the changes that have been made.\nPreview the HTML help with ?animal_sounds.\nFill in the Roxygen skeleton for animal_sounds(), recreating the documentation file and previewing the HTML help to view your updates.\nWhen you have finished editing, run devtools::document() to ensure the .Rd file is in sync. Make a git commit with your updated R/animal_sounds.R file, the updated NAMESPACE, and the new man/animal_sounds.Rd file."
  },
  {
    "objectID": "slides/03-documentation/index.html#rd-markup",
    "href": "slides/03-documentation/index.html#rd-markup",
    "title": "Function documentation and dependencies",
    "section": ".Rd Markup",
    "text": ".Rd Markup\n.Rd files recognise LaTeX-like mark-up in most text-based fields, e.g.\n#' This is a convenience function that is a wrapper around\n#' \\code{\\link{sort.int}}.\nDetails can be found in the Writing R documentation files section of the Writing R Extensions manual."
  },
  {
    "objectID": "slides/03-documentation/index.html#using-markdown",
    "href": "slides/03-documentation/index.html#using-markdown",
    "title": "Function documentation and dependencies",
    "section": "Using markdown",
    "text": "Using markdown\nMost commonly-used mark-up is easier with markdown (can be mixed with .Rd mark-up).\n\nText formatting: **bold**, _italic_, `code`\nCreate links\n\nTo a function in the same package: [func()]\nTo a function in a different package: [pkg::func()]\nWith different link text, e.g. [link text][func()]\n\n\nFor more details, see the (R)Markdown support vignette.\n\nSeems you no longer need to specify pkg:: - will find the documentation in any installed package. For functions in multiple packages, e.g. select() help pane will offer a choice. Probably still best practice to use pkg:: for disambiguation, though still may not be necessary for base functions"
  },
  {
    "objectID": "slides/03-documentation/index.html#your-turn-1",
    "href": "slides/03-documentation/index.html#your-turn-1",
    "title": "Function documentation and dependencies",
    "section": "Your turn",
    "text": "Your turn\n\nAdd some details to the help page for animal_sounds(), with a link to paste0() and some markdown syntax.\nAdd a link to a function from a package you don’t have installed (perhaps basemodels::dummy_classifier()).\nRun devtools::document() and check the link in the help page. What happens?\nRun devtools::check(). Does the link cause problems?\nDelete the link to the package you don’t have installed and run devtools::document() again.\nCommit all your changes to the git repo.\n\n\nIn 3, the link will still be created (and will work if you subsequently install the missing package). It’s a good idea to have the package installed so the link can be checked during R CMD check, otherwise you will get a NOTE.\nbasemodels was added to CRAN the week before the workshop was taught, so very likely to be the case that no-one present has it installed."
  },
  {
    "objectID": "slides/03-documentation/index.html#dependencies-1",
    "href": "slides/03-documentation/index.html#dependencies-1",
    "title": "Function documentation and dependencies",
    "section": "Dependencies",
    "text": "Dependencies\nDependencies are other R packages that our package uses. There are three types of dependency:\nImports: required packages, will be installed when our package is installed if they are not already installed.\nSuggests: optional packages, e.g. only used for development; only used in documentation. Not installed automatically with our package.\nDepends: essentially deprecated for packages, may be used to specify a minimum required version of R (i.e., version of the core packages)."
  },
  {
    "objectID": "slides/03-documentation/index.html#imported-packages",
    "href": "slides/03-documentation/index.html#imported-packages",
    "title": "Function documentation and dependencies",
    "section": "Imported packages",
    "text": "Imported packages\nIn DESCRIPTION\nImports: \n    pkgname1\n    pkgname2\nUse :: to access functions\nnew_function &lt;- function(x, y, z) {\n  w &lt;- pkgname1::imported_function(x, y)\n  pkgname2::imported_function(w, z)\n}"
  },
  {
    "objectID": "slides/03-documentation/index.html#suggested-packages",
    "href": "slides/03-documentation/index.html#suggested-packages",
    "title": "Function documentation and dependencies",
    "section": "Suggested packages",
    "text": "Suggested packages\nIn DESCRIPTION\nSuggests: \n    pkgname\nIn package functions or examples, handle the case where pkgname is not available:\nif (!requireNamespace(\"pkgname\", quietly = TRUE)){\n  warning(\"pkgname must be installed to perform this function\",\n          \"returning NULL\")\n  return(NULL)\n}\n\nAlso explain conditional use in vignettes later\nMaybe talk about rlang here as well"
  },
  {
    "objectID": "slides/03-documentation/index.html#use_package",
    "href": "slides/03-documentation/index.html#use_package",
    "title": "Function documentation and dependencies",
    "section": "use_package()",
    "text": "use_package()\nuse_package() will modify the DESCRIPTION and remind you how to use the function.\nBy default, packages will be added to “Imports”.\n\nusethis::use_package(\"rlang\")\nusethis::use_package(\"glue\", type = \"Suggests\")"
  },
  {
    "objectID": "slides/03-documentation/index.html#you-might-get-tired-of-using-all-the-time",
    "href": "slides/03-documentation/index.html#you-might-get-tired-of-using-all-the-time",
    "title": "Function documentation and dependencies",
    "section": "You might get tired of using :: all the time",
    "text": "You might get tired of using :: all the time\nOr you might want to use an infix function\n\n`%&gt;%` &lt;- magittr::`%&gt;%`\n\ncol_summary &lt;- function(df, fun) {\n  stopifnot(is.data.frame(df))\n\n  df %&gt;%\n    purrr::keep(is.numeric) %&gt;%\n    purrr::modify(fun)\n}"
  },
  {
    "objectID": "slides/03-documentation/index.html#you-can-import-functions-into-the-package",
    "href": "slides/03-documentation/index.html#you-can-import-functions-into-the-package",
    "title": "Function documentation and dependencies",
    "section": "You can import functions into the package",
    "text": "You can import functions into the package\n\n#' @importFrom purrr keep modify\n#' @importFrom magrittr %&gt;%\ncol_summary &lt;- function(df, fun) {\n  stopifnot(is.data.frame(df))\n\n  df %&gt;%\n    keep(is.numeric) %&gt;%\n    modify(fun)\n}\n\ndevtools::document() will add corresponding import() statements to the NAMESPACE, e.g. import(purr, keep, modify).\nAdding formal imports is slightly more efficient than using ::.\nHere, the @importFrom tag is placed above the function in which the imported function is used."
  },
  {
    "objectID": "slides/03-documentation/index.html#package-level-import-file",
    "href": "slides/03-documentation/index.html#package-level-import-file",
    "title": "Function documentation and dependencies",
    "section": "Package-level import file",
    "text": "Package-level import file\nImports belong to the package, not to individual functions, so alternatively you can recognise this by storing them in a central location, e.g. R/animalsounds-package.R\n#' @importFrom purrr keep modify\n#' @importFrom magrittr %&gt;%\nNULL\n\nThis removes the possibility of multiple (redundant) imports of the same function. But harder to remember to remove import if function changes! It’s a matter of personal taste."
  },
  {
    "objectID": "slides/03-documentation/index.html#usethisuse_import_from",
    "href": "slides/03-documentation/index.html#usethisuse_import_from",
    "title": "Function documentation and dependencies",
    "section": "usethis::use_import_from()",
    "text": "usethis::use_import_from()\nThere can be several steps to importing a function. usethis::use_import_from() takes care of all of them.\nIt will first create the package documentation file R/animalsounds-package.R (if it doesn’t already exist – you will also need to agree to this).\n\nusethis::use_import_from(\"purrr\", c(\"keep\", \"modify\"))\n\n✔ Adding 'purrr' to Imports field in DESCRIPTION\n✔ Adding '@importFrom purrr keep', '@importFrom purrr modify' to 'R/animalsounds-package.R'\n✔ Writing 'NAMESPACE'\n✔ Loading animalsounds\n\nuse_import_from() is opinionated in implementing package-level import (rather than above the function in which they are used).\nMay need to close and reopen R/animalsounds-package.R to see the changes."
  },
  {
    "objectID": "slides/03-documentation/index.html#it-may-be-tempting-to-import-a-whole-package",
    "href": "slides/03-documentation/index.html#it-may-be-tempting-to-import-a-whole-package",
    "title": "Function documentation and dependencies",
    "section": "It may be tempting to import a whole package…",
    "text": "It may be tempting to import a whole package…\n#' @import purrr\ncol_summary &lt;- function(df, fun) {\n  stopifnot(is.data.frame(df))\n\n  df %&gt;%\n    keep(is.numeric) %&gt;%\n    map_dfc(fun)\n}"
  },
  {
    "objectID": "slides/03-documentation/index.html#but-it-is-dangerous",
    "href": "slides/03-documentation/index.html#but-it-is-dangerous",
    "title": "Function documentation and dependencies",
    "section": "…but it is dangerous",
    "text": "…but it is dangerous\n#' @import pkg1\n#' @import pkg2\nfun &lt;- function(x) {\n  fun1(x) + fun2(x)\n}\nWorks today…\n… but next year, what if pkg2 adds a fun1 function?"
  },
  {
    "objectID": "slides/03-documentation/index.html#documenting-dependencies",
    "href": "slides/03-documentation/index.html#documenting-dependencies",
    "title": "Function documentation and dependencies",
    "section": "Documenting dependencies",
    "text": "Documenting dependencies\n\n\n\n\nDESCRIPTION\nNAMESPACE\n\n\n\n\nMakes package available\nMakes function available\n\n\nMandatory\nOptional (can use :: instead)\n\n\nuse_package()\nuse_import_from()"
  },
  {
    "objectID": "slides/03-documentation/index.html#example-rlang-and-cli",
    "href": "slides/03-documentation/index.html#example-rlang-and-cli",
    "title": "Function documentation and dependencies",
    "section": "Example: rlang and cli",
    "text": "Example: rlang and cli\nCurrently we are using stopifnot() for argument validation\n\nstopifnot(is.character(animal) & length(animal) == 1)\nstopifnot(is.character(sound) & length(sound) == 1)\n\nWe might instead use rlang::is_character() with cli::cli_abort()\n\nsound &lt;- c(\"woof\", \"bark\")\n\nif (!rlang::is_character(sound, n = 1)) {\n  cli::cli_abort(\"`sound` must be a single string!\")\n}\n\nError:\n! `sound` must be a single string!\n\n\n\nin is_character, n tests for length of the vector.\ncli::cli_abort() has some really nice capability - glue interpolation (next slide) - inline classes (next slide) - features that make it easier to write tests (covered later in this course)\nhttps://cli.r-lib.org/reference/inline-markup.html"
  },
  {
    "objectID": "slides/03-documentation/index.html#aside-informative-messages-with-cli",
    "href": "slides/03-documentation/index.html#aside-informative-messages-with-cli",
    "title": "Function documentation and dependencies",
    "section": "Aside: informative messages with cli",
    "text": "Aside: informative messages with cli\ncli functions can combine glue interpolation and inline classes to produce informative, nicely-formatted error messages.\nIn animal_sounds() we can use\n\ncli::cli_abort(\n  c(\"{.var animal} must be a single string!\",\n    \"i\" = \"It was {.type {animal}} of length {length(animal)} instead.\")\n)\n\nThis gives the error message\n\nanimal_sounds(c(\"dog\", \"cat\"), c(\"woof\", \"miaow\"))\n\nError in `animal_sounds()`:\n! `animal` must be a single string!\nℹ It was a character vector of length 2 instead.\n\n\n\nInformative error messages will make using your package a much nicer experience for you and others."
  },
  {
    "objectID": "slides/03-documentation/index.html#your-turn-2",
    "href": "slides/03-documentation/index.html#your-turn-2",
    "title": "Function documentation and dependencies",
    "section": "Your turn",
    "text": "Your turn\n\nUse use_package() to add rlang and cli to Imports.\nUpdate animal_sounds() to use is_character() to check the arguments and cli_abort to throw an informative error if necessary, using :: to fully qualify the function calls.\nLoad all and try giving animal_sounds() invalid inputs for animal and/or sound.\nCommit your changes to git.\nPush your commits for this session."
  },
  {
    "objectID": "slides/03-documentation/index.html#references",
    "href": "slides/03-documentation/index.html#references",
    "title": "Function documentation and dependencies",
    "section": "References",
    "text": "References\nWickham, H and Bryan, J, R Packages (2nd edn, in progress), https://r-pkgs.org.\nR Core Team, Writing R Extensions, https://cran.r-project.org/doc/manuals/r-release/R-exts.html"
  },
  {
    "objectID": "slides/03-documentation/index.html#license",
    "href": "slides/03-documentation/index.html#license",
    "title": "Function documentation and dependencies",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "slides/04-testing/index.html#overview",
    "href": "slides/04-testing/index.html#overview",
    "title": "Testing",
    "section": "Overview",
    "text": "Overview\n\nUnit testing with testthat\nTest driven development"
  },
  {
    "objectID": "slides/04-testing/index.html#why-test",
    "href": "slides/04-testing/index.html#why-test",
    "title": "Testing",
    "section": "Why test?",
    "text": "Why test?\nWe build new functions one bit at a time.\nWhat if a new thing we add changes the existing functionality?\nHow can we check and be sure all the old functionality still works with New Fancy Feature?\nUnit Tests!\n\nGives confidence to package users as well"
  },
  {
    "objectID": "slides/04-testing/index.html#set-up-test-infrastructure",
    "href": "slides/04-testing/index.html#set-up-test-infrastructure",
    "title": "Testing",
    "section": "Set up test infrastructure",
    "text": "Set up test infrastructure\nFrom the root of a package project:\nusethis::use_testthat()\n✔ Adding 'testthat' to Suggests field in DESCRIPTION\n✔ Setting Config/testthat/edition field in DESCRIPTION to '3'\n✔ Creating 'tests/testthat/'\n✔ Writing 'tests/testthat.R'\n• Call `use_test()` to initialize a basic test file and open it for editing.\ntests/testthat.R loads testthat and the package being tested, so you don’t need to add library() calls to the test files."
  },
  {
    "objectID": "slides/04-testing/index.html#tests-are-organised-in-three-layers",
    "href": "slides/04-testing/index.html#tests-are-organised-in-three-layers",
    "title": "Testing",
    "section": "Tests are organised in three layers",
    "text": "Tests are organised in three layers\n\n\nA file holds multiple related tests.\nA test groups together multiple expectations to test the output from a simple function, a range of possibilities for a single parameter from a more complicated function, or tightly related functionality from across multiple functions.\nAn expectation is the atom of testing. It describes the expected result of a computation: Does it have the right value and right class?"
  },
  {
    "objectID": "slides/04-testing/index.html#what-to-test",
    "href": "slides/04-testing/index.html#what-to-test",
    "title": "Testing",
    "section": "What to test",
    "text": "What to test\nTest every individual task the function completes separately.\nCheck both for successful situations and for expected failure situations."
  },
  {
    "objectID": "slides/04-testing/index.html#expectations",
    "href": "slides/04-testing/index.html#expectations",
    "title": "Testing",
    "section": "Expectations",
    "text": "Expectations\nThree expectations cover the vast majority of cases\nexpect_equal(object, expected)\n\nexpect_error(object, regexp = NULL, class = NULL)\n\nexpect_warning(object, regexp = NULL, class = NULL)\n\nIt used to be standard practice to test for errors and warnings using regexp, but that has downsides - it’s not always clear why a test is failing. Testing via class is a more modern, safer approach, which we’ll use below."
  },
  {
    "objectID": "slides/04-testing/index.html#our-example-function",
    "href": "slides/04-testing/index.html#our-example-function",
    "title": "Testing",
    "section": "Our example function",
    "text": "Our example function\n\nanimal_sounds &lt;- function(animal, sound) {\n  \n  if (!rlang::is_character(animal, 1)) {\n    cli::cli_abort(\"{.var animal} must be a single string!\")\n  }\n  \n  if (!rlang::is_character(sound, 1)) {\n    cli::cli_abort(\"{.var sound} must be a single string!\")\n  }\n  \n  paste0(\"The \", animal, \" goes \", sound, \"!\")\n}"
  },
  {
    "objectID": "slides/04-testing/index.html#a-sample-test",
    "href": "slides/04-testing/index.html#a-sample-test",
    "title": "Testing",
    "section": "A sample test",
    "text": "A sample test\nFirst, create a test file for this function, in either way:\n# In RStudio, with `animal_sounds.R` the active file:\nusethis::use_test()  \n\n# More generally\nusethis::use_test(\"animal_sounds\")\n\n\n\n\nNote\n\n\nRStudio makes it really easy to swap between associated R scripts and tests.\nIf the R file is open, usethis::use_test() (with no arguments) opens or creates the test.\nWith the test file open, usethis::use_r() (with no arguments) opens or creates the R script."
  },
  {
    "objectID": "slides/04-testing/index.html#add-a-test",
    "href": "slides/04-testing/index.html#add-a-test",
    "title": "Testing",
    "section": "Add a test",
    "text": "Add a test\nIn the now-created and open tests/testthat/test-animal_sounds.R script:\n\ntest_that(\"animal_sounds produces expected strings\", {\n  dog_woof &lt;- animal_sounds(\"dog\", \"woof\")\n  expect_equal(dog_woof, \n               \"The dog goes woof!\")\n})"
  },
  {
    "objectID": "slides/04-testing/index.html#run-tests",
    "href": "slides/04-testing/index.html#run-tests",
    "title": "Testing",
    "section": "Run tests",
    "text": "Run tests\nTests can be run interactively like any other R code. The output will appear in the console, e.g. for a successful test:\nTest passed 😀\nAlternatively, we can run tests in the background with the output appearing in the build pane.\n\ntestthat::test_file() – run all tests in a file (‘Run Tests’ button)\ndevtools::test() – run all tests in a package (Ctrl/Cmd + Shift + T, or Build &gt; Test Package)"
  },
  {
    "objectID": "slides/04-testing/index.html#testing-equality",
    "href": "slides/04-testing/index.html#testing-equality",
    "title": "Testing",
    "section": "Testing equality",
    "text": "Testing equality\nFor numeric values, expect_equal() allows some tolerance:\n\nexpect_equal(10, 10 + 1e-7)\n\n\nexpect_equal(10, 10 + 1e-4, tolerance = 1e-4)\n\n\nexpect_equal(10, 10 + 1e-5)\n\nError: 10 not equal to 10 + 1e-05.\n1/1 mismatches\n[1] 10 - 10 == -1e-05\n\n\nNote that when the expectation is met, there is nothing printed.\n\nUse expect_identical() to test exact equivalence.\nUse expect_equal(ignore_attr = TRUE) to ignore different attributes (e.g. names)."
  },
  {
    "objectID": "slides/04-testing/index.html#expect_error-expect_warning",
    "href": "slides/04-testing/index.html#expect_error-expect_warning",
    "title": "Testing",
    "section": "expect_error(), expect_warning()",
    "text": "expect_error(), expect_warning()\nWhen we expect an error/warning when the code is run, we need to pass the call to expect_error()/expect_warning() directly.\nOne way is to expect a text outcome using a regular expression:\n\ntest_that(\"handles invalid inputs\", {\n    expect_error(animal_sounds(\"dog\", c(\"woof\", \"bow wow wow\")), \n                 \"`sound` must be a single string\")\n})\n\nHowever, the regexp can get fiddly, especially if there are characters to escape. There is a more modern, precise way…\n\nhave to call animal_sounds within expect_error - if we try calling it first (as we did in expect_equal) our code will throw an error before it has a chance to test for it!"
  },
  {
    "objectID": "slides/04-testing/index.html#using-a-condition-class",
    "href": "slides/04-testing/index.html#using-a-condition-class",
    "title": "Testing",
    "section": "Using a condition class",
    "text": "Using a condition class\nWhen using cli::cli_abort() and cli::cli_warn() to throw errors and warnings, we can signal the condition with a class, which we can then use in our tests.\nFirst, we need to modify the calls to cli::cli_abort in animal_sounds()\n\nif (!rlang::is_character(sound, 1)) {\n  cli::cli_abort(\n    c(\"{.var sound} must be a single string!\",\n      \"i\" = \"It was {.type {sound}} of length {length(sound)} instead.\"),\n    class = \"error_not_single_string\"\n  )\n}\n\n# and same for `animal` argument"
  },
  {
    "objectID": "slides/04-testing/index.html#using-a-conditions-class-in-tests",
    "href": "slides/04-testing/index.html#using-a-conditions-class-in-tests",
    "title": "Testing",
    "section": "Using a condition’s class in tests",
    "text": "Using a condition’s class in tests\nWe can then check for this class in the test\n\ntest_that(\"handles invalid inputs\", {\n    expect_error(animal_sounds(\"dog\", c(\"woof\", \"bow wow wow\")), \n                 class = \"error_not_single_string\") \n})\n\nAdvantages of using class:\n\nIt is under your control\nIf the condition originates from base R or another package, proceed with caution – a good reminder to re-consider the wisdom of testing a condition that is not fully under your control in the first place.\n\nFrom https://r-pkgs.org/testing-basics.html#testing-errors\n\nNeed to use argument name class as not matched by position (regexp comes before first)"
  },
  {
    "objectID": "slides/04-testing/index.html#your-turn",
    "href": "slides/04-testing/index.html#your-turn",
    "title": "Testing",
    "section": "Your turn",
    "text": "Your turn\n\nCreate a test file for animal_sounds() and add the tests defined in the slides.\nAdd a new expectation to the test “handles invalid inputs” to test the expected behaviour when a factor of length 1 is passed as the sound argument.\nRun the updated test by sending the code chunk to the console.\nRun all the tests.\nCommit your changes to the repo.\n\n\nanimal_sounds(factor(“cat”), “miaow”))"
  },
  {
    "objectID": "slides/04-testing/index.html#snapshot-tests",
    "href": "slides/04-testing/index.html#snapshot-tests",
    "title": "Testing",
    "section": "Snapshot tests",
    "text": "Snapshot tests\nSometimes it is difficult to define the expected output, e.g. to test images or output printed to the console. expect_snapshot() captures all messages, warnings, errors, and output from code.\nWhen we expect the code to throw an error (e.g. if we want to test the appearance of an informative message), we need to specify error = TRUE.\n\ntest_that(\"error message for invalid input\", {\n  expect_snapshot(animal_sounds(\"dog\", c(\"woof\", \"bow wow wow\")),\n                  error = TRUE)\n})\n\nSnapshot tests can not be run interactively by sending to the console, instead we must use devtools::test() or testthat::testfile().\n\nexpect_error for testing that an error is thrown, expect_snapshot for testing the appearance of the error message\nsnapshot test skipped on CRAN by default - use other functions to test correctness where possible.\nEquivalently Build menu “Test Package” or RStudio code editor “Run tests” button"
  },
  {
    "objectID": "slides/04-testing/index.html#create-snapshot",
    "href": "slides/04-testing/index.html#create-snapshot",
    "title": "Testing",
    "section": "Create snapshot",
    "text": "Create snapshot\nRun the tests once to create the snapshot\n── Warning (test-animal_sounds.R:16:3): error message for invalid input ──\nAdding new snapshot:\nCode\n  animal_sounds(\"dog\", c(\"woof\", \"bow wow wow\"))\nError &lt;error_not_single_string&gt;\n  `sound` must be a single string!\n  i It was a character vector of length 2 instead.\nAn animal_sounds.md file is created in tests/testhat/_snaps with the code and output."
  },
  {
    "objectID": "slides/04-testing/index.html#test-against-a-snapshot",
    "href": "slides/04-testing/index.html#test-against-a-snapshot",
    "title": "Testing",
    "section": "Test against a snapshot",
    "text": "Test against a snapshot\n\nNext time the tests are run the output will be compared against this snapshot.\nSuppose we update some of the error message in animal_sounds to\n\n\"{.var sound} must be a {.cls character} vector of length 1!\"\n\nWhen we rerun the test, we’ll get a failure:\n── Failure (test-animal_sounds.R:16:3): error message for invalid input ──\nSnapshot of code has changed:\nold vs new\n  \"Code\"\n  \"  animal_sounds(\\\"dog\\\", c(\\\"woof\\\", \\\"bow wow wow\\\"))\"\n  \"Error &lt;error_not_single_string&gt;\"\n- \"  `sound` must be a single string!\"\n+ \"  `sound` must be a &lt;character&gt; vector of length 1!\"\n  \"  i It was a character vector of length 2 instead.\"\n\n* Run testthat::snapshot_accept('animal_sounds') to accept the change.\n* Run testthat::snapshot_review('animal_sounds') to interactively review the change.\n\n\nNote the next steps with snapshot_accept and snapshot_review"
  },
  {
    "objectID": "slides/04-testing/index.html#so-far-weve-done-this",
    "href": "slides/04-testing/index.html#so-far-weve-done-this",
    "title": "Testing",
    "section": "So far we’ve done this",
    "text": "So far we’ve done this"
  },
  {
    "objectID": "slides/04-testing/index.html#test-driven-development-is-a-new-workflow",
    "href": "slides/04-testing/index.html#test-driven-development-is-a-new-workflow",
    "title": "Testing",
    "section": "Test driven development is a new workflow",
    "text": "Test driven development is a new workflow"
  },
  {
    "objectID": "slides/04-testing/index.html#your-turn-1",
    "href": "slides/04-testing/index.html#your-turn-1",
    "title": "Testing",
    "section": "Your turn",
    "text": "Your turn\n\nMake this test pass\ngiraffe &lt;- animalSounds(\"giraffe\")\nexpect_equal(giraffe, \n             \"The giraffe makes no sound.\")\nHint: set the default value for the sound argument to NULL.\nCommit your changes to the git repo.\nPush your commits from this session."
  },
  {
    "objectID": "slides/04-testing/index.html#when-you-stop-work-leave-a-test-failing.",
    "href": "slides/04-testing/index.html#when-you-stop-work-leave-a-test-failing.",
    "title": "Testing",
    "section": "When you stop work, leave a test failing.",
    "text": "When you stop work, leave a test failing."
  },
  {
    "objectID": "slides/04-testing/index.html#references",
    "href": "slides/04-testing/index.html#references",
    "title": "Testing",
    "section": "References",
    "text": "References\nWickham, H and Bryan, J, R Packages (2nd edn, in progress), https://r-pkgs.org.\nR Core Team, Writing R Extensions, https://cran.r-project.org/doc/manuals/r-release/R-exts.html"
  },
  {
    "objectID": "slides/04-testing/index.html#license",
    "href": "slides/04-testing/index.html#license",
    "title": "Testing",
    "section": "License",
    "text": "License\nLicensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License (CC BY-NC-SA 4.0)."
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "Prerequisites",
    "section": "",
    "text": "This is an intermediate/advanced R course, so basic knowledge of R is expected. In particular, participants should be confident writing functions. The final session of the workshop is on incorporating Rcpp functions in an R package, so some knowledge of C++/Rcpp is beneficial.\nThe first three sessions of Warwick-Stats-Resources R Foundations course covers the required material basic material:\n\nIntroduction to R and RStudio\nData Wrangling\nProgramming in R\n\nThe Rcpp session of the Warwick-Stats-Resources R Programming course covers C++/Rcpp:\n\nC++ and Rcpp"
  },
  {
    "objectID": "prerequisites.html#prior-knowledge",
    "href": "prerequisites.html#prior-knowledge",
    "title": "Prerequisites",
    "section": "",
    "text": "This is an intermediate/advanced R course, so basic knowledge of R is expected. In particular, participants should be confident writing functions. The final session of the workshop is on incorporating Rcpp functions in an R package, so some knowledge of C++/Rcpp is beneficial.\nThe first three sessions of Warwick-Stats-Resources R Foundations course covers the required material basic material:\n\nIntroduction to R and RStudio\nData Wrangling\nProgramming in R\n\nThe Rcpp session of the Warwick-Stats-Resources R Programming course covers C++/Rcpp:\n\nC++ and Rcpp"
  },
  {
    "objectID": "prerequisites.html#git-and-github",
    "href": "prerequisites.html#git-and-github",
    "title": "Prerequisites",
    "section": "git and GitHub",
    "text": "git and GitHub\nAlthough there will be some time dedicated to this in the workshop, it would be advantageous if you already have:\n\ngit installed on your computer. See https://git-scm.com/book/en/v2/Getting-Started-Installing-Git\na GitHub account\na GitHub PAT configured to work with RStudio – the vignette from the usethis package on Managing Git(Hub) Credentials goes through this."
  },
  {
    "objectID": "prerequisites.html#r-and-rstudio",
    "href": "prerequisites.html#r-and-rstudio",
    "title": "Prerequisites",
    "section": "R and RStudio",
    "text": "R and RStudio\nPlease ensure that you have the latest versions of R and RStudio installed prior to the first session. Currently, that’s R-4.4.0 and RStudio-2024.04.1.\nWe also strongly recommend all participants to install the development tools to avoid potential issues installing packages.\n\nInstalling R\nDownload the pre-compiled binary for your OS from https://cloud.r-project.org/ and install. More specifically:\nFor Windows\nClick “Download R for Windows”, then “base”, then “Download R-4.4.0 for Windows”. This will download an .exe file; once downloaded, open to start the installation.\nFor Mac\nClick “Download R for macOS”, then “R-4.4.0-arm64.pkg” (the first option) to download the installer for Macs with Apple Silicon chips or “R-4.4.0-x86_64.pkg” (the second option) to download the installer for Macs with Intel chips. Run the installer to complete installation.\nFor Linux\nClick “Download R for Linux”. Instructions on installing are given for Debian, Fedora, Redhat, Suse and Ubuntu distributions. Where there is a choice, install both r-base and r-base-dev.\n\n\nInstalling R Studio Desktop (Open Source Edition)\nDownloads are available from https://posit.co/download/rstudio-desktop/\nDownload the relevant installer either under the “Install RStudio” header or, scrolling down the page, from the ‘All installers and Tarballs’ section. Run the installer to complete installation.\nFor Windows with no admin rights\nDownload the .zip source archive under “Zip/Tarballs”. Extract the files to a folder where you have write access, e.g. C:\\Users\\username\\RStudio. In this folder, open the bin directory and find the RStudio program: it is named rstudio.exe, but the file extension will typically be hidden, so look for rstudio. Right-click this executable to create a desktop shortcut. Double-click the executable or use the shortcut to open.\nFor all other operating systems\nDownload the relevant installer for your OS listed under “Installers for Supported Platforms”. Run the installer to complete installation.\n\n\nDevelopment Tools\nSome additional tools may be required to compile R packages from source.\nFor Windows with no admin rights\nDownload the latest (recommended) Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer keeping the default settings.\nFor Windows with admin rights\nDownload the latest Rtools installer, Rtools.exe, from https://cran.r-project.org/bin/windows/Rtools/. Run the installer making the following selections: keep the default settings for the installation location and components to install; check the box to add rtools to the system PATH.\nFor Mac\nInstall XCode. Either:\n\nDownload and install XCode from the Mac AppStore: http://itunes.apple.com/us/app/xcode/id497799835?mt=12\nWithin XCode go to Preferences : Downloads and install the Command Line Tools\n\nOr for a smaller download size:\n\nRegister as an Apple Developer (free) here: https://developer.apple.com/programs/register/\nDownload the Command Line Tools for XCode appropriate for the version of OS X you are running from here: https://developer.apple.com/downloads/\n\nFor Linux\nIf you installed r-base-dev, when installing R, you should have all you need to build packages from source. Otherwise return to the instructions for installing R for your distribution and follow the instructions there to install the additional tools."
  }
]